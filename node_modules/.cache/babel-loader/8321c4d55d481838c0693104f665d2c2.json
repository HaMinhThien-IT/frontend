{"ast":null,"code":"import axios from \"axios\";\n\nclass Http {\n  constructor() {\n    this.instance = void 0;\n    this.instance = axios.create({\n      baseURL: process.env.REACT_APP_API,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    this.instance.interceptors.response.use(response => {\n      const result = { ...response.data,\n        status: response.status\n      };\n      return result;\n    }, _ref => {\n      let {\n        response\n      } = _ref;\n      const result = { ...response.data,\n        status: response.status\n      };\n      return Promise.reject(result);\n    });\n    this.instance.interceptors.request.use(config => {\n      const accessToken = localStorage.getItem('jwt');\n\n      if (accessToken) {\n        //authorization tùy server (backend)\n        config.headers.authorization = accessToken;\n      }\n\n      return config;\n    }, error => {\n      return Promise.reject(error.response);\n    });\n  }\n\n  get(url) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return this.instance.get(url);\n  }\n\n  post(url, data) {\n    let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return this.instance.post(url, data);\n  } // put(url:any, data:any, config = null) {\n  //   return this.instance.put(url, data, config)\n  // }\n  // delete(url:any, data:any, config = null) {\n  //   return this.instance.delete(url, {\n  //     data\n  //   })\n  // }\n\n\n}\n\nconst https = new Http();\nexport default https;","map":{"version":3,"sources":["/home/ha/AleTech/frontEnd/src/https.ts"],"names":["axios","Http","constructor","instance","create","baseURL","process","env","REACT_APP_API","timeout","headers","interceptors","response","use","result","data","status","Promise","reject","request","config","accessToken","localStorage","getItem","authorization","error","get","url","post","https"],"mappings":"AAAA,OAAOA,KAAP,MAAwD,OAAxD;;AAEA,MAAMC,IAAN,CAAW;AAEPC,EAAAA,WAAW,GAAG;AAAA,SADKC,QACL;AACZ,SAAKA,QAAL,GAAgBH,KAAK,CAACI,MAAN,CAAa;AAC3BC,MAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADM;AAE3BC,MAAAA,OAAO,EAAE,KAFkB;AAG3BC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHkB,KAAb,CAAhB;AAOA,SAAKP,QAAL,CAAcQ,YAAd,CAA2BC,QAA3B,CAAoCC,GAApC,CACED,QAAQ,IAAI;AACV,YAAME,MAAM,GAAG,EAAE,GAAGF,QAAQ,CAACG,IAAd;AAAoBC,QAAAA,MAAM,EAAEJ,QAAQ,CAACI;AAArC,OAAf;AACA,aAAOF,MAAP;AACD,KAJH,EAKE,QAAkB;AAAA,UAAjB;AAAEF,QAAAA;AAAF,OAAiB;AAChB,YAAME,MAAM,GAAG,EAAE,GAAGF,QAAQ,CAACG,IAAd;AAAoBC,QAAAA,MAAM,EAAEJ,QAAQ,CAACI;AAArC,OAAf;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,MAAf,CAAP;AACD,KARH;AAUA,SAAKX,QAAL,CAAcQ,YAAd,CAA2BQ,OAA3B,CAAmCN,GAAnC,CACGO,MAAD,IAAgB;AACd,YAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAApB;;AACA,UAAIF,WAAJ,EAAiB;AACf;AACAD,QAAAA,MAAM,CAACV,OAAP,CAAec,aAAf,GAA+BH,WAA/B;AACD;;AACD,aAAOD,MAAP;AACD,KARH,EASEK,KAAK,IAAI;AACP,aAAOR,OAAO,CAACC,MAAR,CAAeO,KAAK,CAACb,QAArB,CAAP;AACD,KAXH;AAaD;;AACDc,EAAAA,GAAG,CAACC,GAAD,EAAyB;AAAA,QAAfP,MAAe,uEAAN,IAAM;AAC1B,WAAO,KAAKjB,QAAL,CAAcuB,GAAd,CAAkBC,GAAlB,CAAP;AACD;;AACDC,EAAAA,IAAI,CAACD,GAAD,EAAUZ,IAAV,EAAmC;AAAA,QAAfK,MAAe,uEAAN,IAAM;AACrC,WAAO,KAAKjB,QAAL,CAAcyB,IAAd,CAAmBD,GAAnB,EAAwBZ,IAAxB,CAAP;AACD,GAvCM,CAwCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA/CO;;AAiDT,MAAMc,KAAK,GAAG,IAAI5B,IAAJ,EAAd;AACA,eAAe4B,KAAf","sourcesContent":["import axios, { AxiosInstance ,AxiosRequestConfig} from \"axios\"\n\nclass Http {\n    protected readonly instance: AxiosInstance;\n    constructor() {\n      this.instance = axios.create({\n        baseURL: process.env.REACT_APP_API,\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      this.instance.interceptors.response.use(\n        response => {\n          const result = { ...response.data, status: response.status }\n          return result\n        },\n        ({ response }) => {\n          const result = { ...response.data, status: response.status }\n          return Promise.reject(result)\n        }\n      )\n      this.instance.interceptors.request.use(\n        (config: any)=> {\n          const accessToken = localStorage.getItem('jwt')\n          if (accessToken) {\n            //authorization tùy server (backend)\n            config.headers.authorization = accessToken\n          }\n          return config\n        },\n        error => {\n          return Promise.reject(error.response)\n        }\n      )\n    }\n    get(url:any, config = null) {\n      return this.instance.get(url )\n    }\n    post(url:any, data:any, config = null) {\n      return this.instance.post(url, data)\n    }\n    // put(url:any, data:any, config = null) {\n    //   return this.instance.put(url, data, config)\n    // }\n    // delete(url:any, data:any, config = null) {\n    //   return this.instance.delete(url, {\n    //     data\n    //   })\n    // }\n  }\n  const https = new Http()\n  export default https\n  "]},"metadata":{},"sourceType":"module"}